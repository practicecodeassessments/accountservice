openapi: 3.0.1
info:
  title: Customer and Account Creation Service with Secure End points
  description: This specification is for banking application developed for CGI coding assessment
  version: 0.0.2
servers:
  - url: localhost:8089
paths:
  /api/v1/users/register:
    post:
      summary: Register a new user to the API platform. This is for protection of the APIs. Not related to users of the bank
      operationId: register
      requestBody:
        description: Register user to the platform . This should be the first call that need to be made.Response is access token 
                Copy and use it all the APIs. else 403 forbidden error will be thrown
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterUserRequest'
        required: true
      responses:
        200:
          description: New user Added to the platform. Rest of the APIs can be accessed using this Bearer Token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterUserResponse'


  /api/v1/users/remove:
    post:
      summary: Delete the user from the platform. Once user is removed APIs can not be invoked.
      operationId: remove
      requestBody:
        description: Delete the user from the API platform. After this invocation of the APIs will give 403 error
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthenticationRequest'
        required: true
      responses:
        200:
          description: User deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationResponse'

  /api/v1/accounts:
    post:
      summary: Create a new account for existing customer. If the customer ID is not found in the database error 404 is thrown
      operationId: createAccount
      requestBody:
        description: Add an account to the existing customer .If initial amount is submitted along with customer Id amount will be deposited in to the account
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountRequest'
        required: true
      responses:
        200:
          description: customer added to the platform
          content:
            application/json:
              schema:
                type: string
        404:
          description: Customer information not found

  /api/v1/customers:
    post:
      summary: Create a new  customer with basic details.
      operationId: createCustomer
      requestBody:
        description: Adds a new Customer to the bank with basic details like Name, address, email Id and Phone Number
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerRequest'
        required: true
      responses:
        201:
          description: customer added to the platform
          content:
            application/json:
              schema:
                type: string

  /api/v1/customers/:
    get:
      summary: Read the customer information by Customer Number
      operationId: findCustomerByAccountNumber
      parameters:
        - in: query
          name: customerNumber
          schema:
            type: string
          required: true
      responses:
        200:
          description: Customer information for a given Customer number of the customer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerAccountResponse'
        404:
          description: Account information not found

  /api/v1/accounts/transfer:
    post:
      summary: Transfer the money between two existing accounts.
      operationId: moneyTransfer
      requestBody:
        description: transfer money between 2 accounts
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MoneyTransferRequest'
        required: true
      responses:
        200:
          description: Money Transfer between two accounts
        404:
          description: Failed for a reason


components:
  schemas:
    RegisterUserRequest:
      type: object
      properties:
        userName:
          type: string
          description: User to be added to the platform
        email:
          type: string
          description: Email Id of the User
        password:
          type: string
          description: Password of the User

    RegisterUserResponse:
      type: object
      properties:
        response:
          type: string
          description: Bearer token that will be returned. Same will be used in consuming other APIs

    AuthenticationRequest:
      type: object
      properties:
        userName:
          type: string
          description: User to be authenticated
        password:
          type: string
          description: Password used while registering the user to the platform

    AuthenticationResponse:
      type: object
      properties:
        response:
          type: string
          description: Authenticated successfully if the user credentials are correct

    AccountRequest:
      type: object
      properties:
        customerId:
          type: integer
        initialCredit:
          type: number
          format: double

    CustomerRequest:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        address:
          type: string
        phone:
          type: number

    AccountResponse:
      type: object
      properties:
        accountNumber:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        availableBalance:
          type: number
          format: double
        balance:
          type: number
          format: double
        AccountType:
          enum:
            - 'SAVINGS'
            - 'CURRENT'
          default: 'CURRENT'
        AccountStatus:
          enum:
            - 'ACTIVE'
            - 'DORMANT'
          default: 'ACTIVE'
        UpdateStatus:
          enum:
            - 'PENDING'
            - 'SUCCESSFUL'
            - 'FAILED'
          default: 'SUCCESSFUL'

    MoneyTransferRequest:
      type: object
      properties:
        sourceAccountNumber:
          type: string
        destinationAccountNumber:
          type: string
        moneyToBeTransferred:
          type: number
          format: double

    CustomerAccountResponse:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        customerId:
          type: integer

